document.addEventListener('DOMContentLoaded', () => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  const gameGrid = document.getElementById('game-grid');
  const pairsCounter = document.getElementById('pairs');
  const totalPairsCounter = document.getElementById('total-pairs');
  const movesCounter = document.getElementById('moves');
  const timerDisplay = document.getElementById('timer');
  const resetBtn = document.getElementById('reset-btn');
  const gameCompleteElement = document.getElementById('game-complete');
  const finalMovesElement = document.getElementById('final-moves');
  const finalTimeElement = document.getElementById('final-time');
  const playAgainBtn = document.getElementById('play-again-btn');

  // –î–∞–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö - –ø–∞—Ä—ã —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
  const animals = [
    { id: 1, name: "–ö–æ—à–∫–∞", emoji: "üê±", color: "#FFD1DC" },
    { id: 2, name: "–°–æ–±–∞–∫–∞", emoji: "üê∂", color: "#BAFFC9" },
    { id: 3, name: "–°–ª–æ–Ω", emoji: "üêò", color: "#BAE1FF" },
    { id: 4, name: "–õ–µ–≤", emoji: "ü¶Å", color: "#FFE8BA" },
    { id: 5, name: "–õ–∏—Å–∞", emoji: "ü¶ä", color: "#FFC8A2" },
    { id: 6, name: "–û–±–µ–∑—å—è–Ω–∞", emoji: "üêµ", color: "#E2BAFF" },
    { id: 7, name: "–ó–µ–±—Ä–∞", emoji: "ü¶ì", color: "#F0FFC9" },
    { id: 8, name: "–ñ–∏—Ä–∞—Ñ", emoji: "ü¶í", color: "#FFCBC4" }
  ];

  // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let cards = [];
  let flippedCards = [];
  let matchedPairs = 0;
  let moves = 0;
  let gameComplete = false;
  let startTime = null;
  let endTime = null;
  let timerInterval = null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  function initGame() {
    resetGameState();
    createCards();
    updateUI();
    startTimer();
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  function resetGameState() {
    cards = [];
    flippedCards = [];
    matchedPairs = 0;
    moves = 0;
    gameComplete = false;
    startTime = Date.now();
    endTime = null;
    gameGrid.innerHTML = '';
    gameCompleteElement.classList.add('hidden');
    
    if (timerInterval) {
      clearInterval(timerInterval);
      timerInterval = null;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
  function createCards() {
    // –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏-–∫–∞—Ä—Ç–æ—á–∫–∏
    const emojiCards = animals.map(animal => ({
      ...animal,
      content: animal.emoji,
      type: 'emoji',
      matchId: animal.id,
      flipped: false,
      matched: false
    }));
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    const nameCards = animals.map(animal => ({
      ...animal,
      content: animal.name,
      type: 'name',
      matchId: animal.id,
      flipped: false,
      matched: false
    }));
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    cards = [...emojiCards, ...nameCards];
    shuffleCards();
    
    // –°–æ–∑–¥–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    cards.forEach((card, index) => {
      const cardElement = document.createElement('div');
      cardElement.className = 'card';
      cardElement.dataset.index = index;
      
      const cardInner = document.createElement('div');
      cardInner.className = 'card-inner';
      
      const cardFront = document.createElement('div');
      cardFront.className = 'card-front';
      cardFront.textContent = '?';
      
      const cardBack = document.createElement('div');
      cardBack.className = card.type === 'emoji' ? 'card-back emoji' : 'card-back text';
      cardBack.textContent = card.content;
      cardBack.style.backgroundColor = card.color;
      cardBack.style.borderColor = card.color;
      
      cardInner.appendChild(cardFront);
      cardInner.appendChild(cardBack);
      cardElement.appendChild(cardInner);
      
      cardElement.addEventListener('click', () => handleCardClick(index));
      gameGrid.appendChild(cardElement);
    });
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
  function shuffleCards() {
    for (let i = cards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [cards[i], cards[j]] = [cards[j], cards[i]];
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
  function handleCardClick(index) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
    if (
      flippedCards.length === 2 || // –£–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      cards[index].matched || // –ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞
      flippedCards.includes(index) || // –ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞
      gameComplete // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    ) {
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ö–æ–¥–µ
    if (moves === 0 && flippedCards.length === 0 && !timerInterval) {
      startTimer();
    }
    
    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    flipCard(index, true);
    flippedCards.push(index);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (flippedCards.length === 2) {
      moves++;
      updateUI();
      
      const [firstIndex, secondIndex] = flippedCards;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (cards[firstIndex].matchId === cards[secondIndex].matchId) {
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
        setTimeout(() => {
          markAsMatched(firstIndex, secondIndex);
          flippedCards = [];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
          if (matchedPairs === animals.length) {
            endGame();
          }
        }, 300);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        setTimeout(() => {
          flipCard(firstIndex, false);
          flipCard(secondIndex, false);
          flippedCards = [];
        }, 1000);
      }
    }
  }

  // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
  function flipCard(index, isFlipped) {
    cards[index].flipped = isFlipped;
    const cardElement = gameGrid.querySelector(`[data-index="${index}"]`);
    
    if (isFlipped) {
      cardElement.classList.add('flipped');
    } else {
      cardElement.classList.remove('flipped');
    }
  }

  // –û—Ç–º–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
  function markAsMatched(index1, index2) {
    cards[index1].matched = true;
    cards[index2].matched = true;
    
    const card1 = gameGrid.querySelector(`[data-index="${index1}"]`);
    const card2 = gameGrid.querySelector(`[data-index="${index2}"]`);
    
    card1.classList.add('matched');
    card2.classList.add('matched');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è "–ø—Ä–∞–∑–¥–Ω–∏–∫–∞" –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø–∞—Ä—ã
    card1.classList.add('celebrate');
    card2.classList.add('celebrate');
    
    setTimeout(() => {
      card1.classList.remove('celebrate');
      card2.classList.remove('celebrate');
    }, 500);
    
    matchedPairs++;
    updateUI();
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  function endGame() {
    gameComplete = true;
    endTime = Date.now();
    clearInterval(timerInterval);
    
    finalMovesElement.textContent = moves;
    finalTimeElement.textContent = formatTime(endTime - startTime);
    gameCompleteElement.classList.remove('hidden');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  function updateUI() {
    pairsCounter.textContent = matchedPairs;
    totalPairsCounter.textContent = animals.length;
    movesCounter.textContent = moves;
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
  function startTimer() {
    startTime = Date.now();
    
    timerInterval = setInterval(() => {
      const elapsedTime = Date.now() - startTime;
      timerDisplay.textContent = formatTime(elapsedTime);
    }, 1000);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  function formatTime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  resetBtn.addEventListener('click', initGame);
  playAgainBtn.addEventListener('click', initGame);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  initGame();
});